---
- name: Setup k8s other nodes
  hosts:
    - k8s_other_nodes
  roles:
    - role: install_kubernetes

- name: Get secret info from the control plane's master node
  hosts:
    - k8s_cp_master # Expect already running as a control plane
  tasks:
    ###################################
    # k8s_apiserver_advertise_address #
    ###################################

    - name: Resolve domain name
      ansible.builtin.command:
        # TODO: @pollenjp Validation to check if 'inventory_hostname' is a domain name
        cmd: >-
          dig -t a
          {{ '@' ~ network_configs.name_server if network_configs.name_server }}
          +short
          {{ inventory_hostname }}
      register: result
      changed_when: false
    - name: Set k8s_apiserver_advertise_address and validate as ip address
      ansible.builtin.set_fact:
        k8s_apiserver_advertise_address: "{{ result.stdout | ansible.utils.ipaddr('address') }}"
      changed_when: false
      failed_when:
        - not k8s_apiserver_advertise_address

    #############
    # k8s_token #
    #############

    - name: Check kubeadm token
      become: true
      no_log: true # include secret
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail

          TOKEN_NUM="$(kubeadm token list | wc -l)"
          if [[ "${TOKEN_NUM}" -gt 0 ]]; then
              kubeadm token create --ttl 30m \
                2>&1 \
                > /dev/null
          fi

          k8s_token=$(
          kubeadm token list -o go-template='{% raw %}
          {{- $containsAuthentication := false -}}
          {{- $containsSigning := false -}}
          {{- range .usages -}}
              {{- if eq . "authentication" -}}
                  {{- $containsAuthentication = true -}}
              {{- end -}}
              {{- if eq . "signing" -}}
                  {{- $containsSigning = true -}}
              {{- end -}}
          {{- end -}}
          {{- if and $containsAuthentication $containsSigning -}}
            {{- printf "%s\n" .token -}}
          {{- end -}}'{% endraw %} \
          | head -n 1
          )

          echo ${k8s_token}
      register: result
      changed_when: false
    - name: Set token as variable
      no_log: true # include secret
      ansible.builtin.set_fact:
        k8s_token: "{{ result.stdout.rstrip() }}"
      failed_when: not k8s_token

    ####################################
    # k8s_discovery_token_ca_cert_hash #
    ####################################

    - name: Get hash from ca.crt
      no_log: true # include secret
      ansible.builtin.shell:
        executable: /bin/bash
        cmd: |
          set -o pipefail
          openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt \
            | openssl rsa -pubin -outform der 2>/dev/null \
            | openssl dgst -sha256 -hex \
            | sed 's/^.* //'
      register: result
      changed_when: false
    - name: Set k8s_discovery_token_ca_cert_hash
      no_log: true # include secret
      ansible.builtin.set_fact:
        k8s_discovery_token_ca_cert_hash: "{{ result.stdout }}"
      failed_when: not k8s_discovery_token_ca_cert_hash

    ####################################################
    # Certificate key for kubeadm join --control-plane #
    ####################################################

    - name: Generate a new control-plane certificate key
      become: true
      no_log: true # include secret
      ansible.builtin.command:
        cmd: kubeadm certs certificate-key
      register: result
      changed_when: false
    - name: Set a certificate-key variable
      no_log: true # include secret
      ansible.builtin.set_fact:
        k8s_certificate_key: "{{ result.stdout.rstrip() }}"
      failed_when: not k8s_certificate_key

    # control-plane を追加する場合の対応
    - name: Kubeadm upload-certs
      become: true
      ansible.builtin.command:
        cmd: >
          kubeadm init phase upload-certs
          --upload-certs
          --certificate-key {{ k8s_certificate_key }}
          --skip-certificate-key-print
      changed_when: true

    ###########################
    # fetch variables as file #
    ###########################

    - name: Create temporary file
      ansible.builtin.tempfile:
        state: file
        suffix: .tempfile_kubeadm_vars.yml
      register: tempfile_kubeadm_vars
    - name: Write token to tempfile
      no_log: true # include secret
      ansible.builtin.copy:
        content: |
          k8s_apiserver_advertise_address: {{ k8s_apiserver_advertise_address }}
          k8s_token: {{ k8s_token }}
          k8s_discovery_token_ca_cert_hash: {{ k8s_discovery_token_ca_cert_hash }}
          k8s_certificate_key: {{ k8s_certificate_key }}
        dest: "{{ tempfile_kubeadm_vars.path }}"
        mode: 0600
    - name: Copy the token file to local
      ansible.builtin.fetch:
        src: "{{ tempfile_kubeadm_vars.path }}"
        dest: "{{ playbook_dir }}/tmp/k8s_cp_master_kubeadm_variables.yml"
        flat: true
    - name: Remove tempfile
      ansible.builtin.file:
        path: "{{ tempfile_kubeadm_vars.path }}"
        state: absent
      when: tempfile_kubeadm_vars.path is defined

- name: Join k8s nodes
  hosts:
    - k8s_other_nodes
  tasks:
    - name: Check supported version
      ansible.builtin.debug:
        msg: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
      failed_when:
        - >-
          not (
            ansible_distribution == "Ubuntu"
            and
            ansible_distribution_version in ("22.04",)
          )
    - name: Check required variables
      ansible.builtin.debug:
        msg: |
          k8s_is_control_plane={{ k8s_is_control_plane }}

    ################
    # kubeadm join #
    ################

    - name: Load kubeadm variables
      no_log: true # include secret
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/tmp/k8s_cp_master_kubeadm_variables.yml"
      failed_when:
        - not k8s_apiserver_advertise_address
        - not k8s_local_api_endpoint_bind_port
        - not k8s_token
        - not k8s_discovery_token_ca_cert_hash
        - not k8s_certificate_key
    - name: Reset kubeadm
      become: true
      # TODO: @pollenjp Delegate to a variable if reset is allowed
      ansible.builtin.command:
        cmd: kubeadm reset -f
      changed_when: true
    - name: Join node by 'kubeadm join'
      become: true
      no_log: true # include secret
      ansible.builtin.command:
        executable: /bin/bash
        cmd: >
          kubeadm join
            {{ k8s_apiserver_advertise_address }}:{{ k8s_local_api_endpoint_bind_port }}
            {{ "--control-plane" if k8s_is_control_plane }}
            {{ "--certificate-key " ~ k8s_certificate_key if k8s_is_control_plane }}
            --token {{ k8s_token }}
            --discovery-token-ca-cert-hash sha256:{{ k8s_discovery_token_ca_cert_hash }}
      changed_when: true

    ##################
    # reload kubelet #
    ##################

    - name: Restart kubelet
      become: true
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
        daemon_reload: true

    #########################################################
    # Copy the `admin.conf` file to the `~/.kube` directory #
    #########################################################

    - name: Make directory .kube
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: "0755"
      when: k8s_is_control_plane
    - name: Copy config to home dir
      become: true
      ansible.builtin.copy:
        remote_src: true
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: "0600"
      when: k8s_is_control_plane
